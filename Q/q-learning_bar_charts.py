## Hypere-parameter table

from tabulate import tabulate

# (min_lr, min_epsilon, discount, decay, bucket_0, bucket_1, bucket_2, bucket_3)
# cartpole = test_agent(0.38732364823894777, 0.06306044698237305, 0.9560266938018456, 69.67505733621513, 1.1544269302452057, 11.876771802211112, 29.078271526727637, 11.55171329112111)
# mountain_car = test_agent(0.04020428828777738, 0.41041559197591426, 0.5601072581830205, 111.67543600719513, 1.1544269302452057, 11.876771802211112, 29.078271526727637, 11.55171329112111)
# acrobat = test_agent(0.001, 0.5, 0.9999, 42.14476816745908, 1.1544269302452057, 11.876771802211112, 29.078271526727637, 11.55171329112111)

# Tabel of averages
data = [["min_lr", 0.3873, 0.0402, 0.001], 
        ["min_epsilon", 0.0631, 0.4104, 0.5], 
        ["discount", 0.9560, 0.5601, 0.9999], 
        ["decay", 69.68, 111.7, 42.14], 
        ["observation_space_split", (1, 11, 29, 11), (26, 21), (1, 1, 1, 19, 30)]]
  
#define header names
col_names = ["Hyper-parameters for Q-learning", "Tuned on Cartpole", "Tuned on MountainCar", "Tuned on Acrobot"]
  
#display table
print(tabulate(data, headers=col_names))

## RESULTS

# Tested on cartpole
# ave reward for agent trained on cartpole params =  1734.8162000000002
# ave reward for agent trained on mountaincar params =  252.71419999999992
# ave reward for agent trained on acrobat params =  462.84079999999994


# Tested on mountain car
# ave reward for agent trained on cartpole params =  -246.91400000000004
# ave reward for agent trained on mountaincar params =  -169.1069
# ave reward for agent trained on acrobat params =  -147.48590000000007


# Tested on acrobat
# ave reward for agent trained on cartpole params =  -244.44569999999996
# ave reward for agent trained on mountaincar params =  -197.65179999999992
# ave reward for agent trained on acrobat params =  -104.4166


import matplotlib.pyplot as plt
import statistics

#graph 1

x_axis = ['Tuned on CartPole', 'Tuned on MountainCar', 'Tuned on Acrobot']
y_axis = [1735, 253, 463]

# plt.bar(x_axis, y_axis)
# plt.title('Performance of hyperparameters tuned on Cartpole, MountainCar and Acrobot tested on Cartpole')
# plt.xlabel('Game hypereparameters were tuned on')
# plt.ylabel('Average score on Cartpole')
# plt.show()


#graph 2

x_axis = ['Tuned on CartPole', 'Tuned on MountainCar', 'Tuned on Acrobot']
y_axis = [-247, -169, -147]

# plt.bar(x_axis, y_axis)
# plt.title('Performance of hyperparameters tuned on Cartpole, MountainCar and Acrobot tested on MountainCar')
# plt.xlabel('Game hypereparameters were tuned on')
# plt.ylabel('Average score on MountainCar')
# plt.show()


#graph 3

x_axis = ['Tuned on CartPole', 'Tuned on MountainCar', 'Tuned on Acrobot']
y_axis = [-244, -198, -104]

# plt.bar(x_axis, y_axis)
# plt.title('Performance of hyperparameters tuned on Cartpole, MountainCar and Acrobot tested on Acrobot')
# plt.xlabel('Game hypereparameters were tuned on')
# plt.ylabel('Average score on Acrobot')
# plt.show()


#create data
data = [["Cartpole", '1st', '3rd', '3rd'], 
        ["MountainCar", '3rd', '2nd', '2nd'], 
        ["Acrobot", '2nd', '1st', '1st']]
  
#define header names
col_names = ["Tuned on", "Average in Cartpole", "Average in MountainCar", "Average in Acrobot"]
  
#display table
print(tabulate(data, headers=col_names))


## Box Plots

# Tested on CartPole
# params_opt_on_cartpole =  [77.89, 401.62, 1391.82, 70.31, 47.46, 10508.61, 116.02, 64.92, 54.25, 226.84, 79.67, 103.66, 69.15, 98.36, 100.48, 72.22, 67.83, 287.27, 61.17, 107.38, 68.12, 110.35, 14022.43, 284.42, 364.73, 8621.1, 72.07, 119.84, 111.95, 57.9, 350.87, 239.75, 64.47, 126.21, 53.67, 240.4, 76.01, 1158.58, 3179.0, 98.69, 184.79, 350.2, 14219.4, 331.42, 8978.25, 917.67, 30327.05, 174.7, 90.79, 2005.69, 70.97, 290.2, 901.76, 347.48, 103.94, 855.6, 304.41, 1131.49, 72.67, 87.28, 54.81, 84.62, 112.75, 63.95, 1085.52, 959.07, 1012.7, 47.16, 290.82, 1219.13, 75.01, 85.86, 868.42, 75.87, 53.72, 54.18, 686.29, 506.2, 299.91, 96.97, 60.85, 562.86, 63.55, 180.04, 88.47, 1683.53, 463.46, 64.48, 73.53, 4799.24, 162.57, 80.03, 176.28, 1486.1, 119.45, 84.33, 174.9, 39.26, 493.65, 296.78]
# params_opt_on_mountaincar =  [21.02, 27.86, 25.03, 21.14, 19.85, 18.42, 25.73, 33.3, 22.57, 27.25, 33.64, 39.82, 20.88, 24.09, 38.09, 27.79, 20.0, 89.93, 26.71, 18.28, 20.54, 70.09, 47.63, 23.78, 32.18, 20.54, 61.26, 64.33, 25.26, 18.91, 19.12, 22.31, 22.03, 42.23, 25.89, 34.03, 30.16, 22.49, 23.39, 78.02, 24.72, 40.27, 18.62, 23.6, 21.76, 18.77, 23.51, 19.7, 25.71, 26.68, 26.46, 26.2, 20.97, 43.63, 23.72, 24.6, 18.28, 42.4, 22.3, 21.29, 46.02, 27.18, 21.98, 18.21, 36.3, 18.92, 26.62, 34.82, 28.81, 97.19, 19.91, 23.56, 35.35, 58.93, 24.95, 29.48, 25.45, 29.61, 29.74, 46.17, 21.5, 21.48, 27.57, 18.32, 35.15, 37.12, 44.57, 24.38, 37.25, 16.8, 38.79, 23.72, 24.74, 27.81, 35.64, 21.89, 33.54, 26.12, 23.08, 18.31]
# params_opt_on_acrobat =  [94.52, 86.06, 649.91, 84.68, 66.58, 77.05, 398.64, 110.46, 81.27, 295.77, 270.94, 72.76, 296.71, 80.63, 891.8, 104.84, 72.46, 70.85, 970.19, 372.86, 782.24, 120.59, 347.14, 56.19, 99.88, 1165.52, 85.86, 732.04, 78.22, 337.36, 194.1, 69.92, 72.85, 93.03, 74.08, 94.03, 896.9, 1035.78, 71.77, 128.57, 118.36, 941.35, 93.44, 91.39, 5443.83, 322.12, 137.64, 1444.98, 319.29, 292.51, 86.78, 149.77, 1138.52, 849.86, 82.65, 310.44, 461.25, 205.6, 218.79, 160.61, 331.54, 1003.2, 415.8, 189.61, 298.67, 81.05, 103.61, 287.76, 51.71, 1297.69, 4182.78, 684.12, 66.27, 104.12, 101.86, 705.88, 123.02, 115.71, 68.19, 318.9, 75.9, 210.12, 199.33, 88.96, 88.9, 102.4, 277.06, 73.54, 563.74, 90.43, 77.08, 77.7, 99.98, 80.32, 83.65, 105.13, 79.73, 104.29, 97.64, 115.62]
params_opt_on_cartpole =  [44.72, 94.37, 179.97, 92.49, 74.16, 111.02, 430.75, 69.0, 90.24, 78.68, 107.14, 55.13, 88.56, 57.5, 130.32, 114.08, 84.26, 65.18, 417.34, 109.4, 214.1, 57.95, 108.89, 84.96, 72.81, 58.78, 485.85, 81.62, 72.58, 416.52, 414.01, 70.83, 121.12, 123.47, 123.43, 102.33, 41.21, 268.2, 117.9, 113.4, 423.15, 69.73, 58.43, 99.46, 82.54, 454.43, 105.08, 245.48, 414.28, 88.02, 93.65, 74.63, 83.21, 83.57, 124.68, 77.79, 58.0, 59.08, 59.96, 119.75, 50.72, 419.57, 65.72, 393.79, 68.6, 276.91, 473.58, 77.39, 252.54, 414.74, 178.32, 61.47, 400.83, 94.28, 80.31, 86.92, 63.0, 77.33, 417.03, 88.57, 258.37, 76.09, 229.52, 216.24, 94.51, 82.55, 98.72, 73.53, 65.22, 75.38, 261.16, 242.39, 52.71, 476.46, 61.95, 68.27, 69.71, 68.59, 91.69, 80.09]
params_opt_on_mountaincar =  [18.68, 27.4, 42.35, 21.91, 20.44, 18.77, 20.96, 22.04, 22.93, 21.03, 17.62, 34.75, 22.53, 32.05, 25.42, 126.94, 76.48, 26.02, 47.79, 31.32, 19.91, 43.37, 23.21, 22.82, 30.36, 30.86, 24.27, 29.98, 23.12, 23.78, 25.01, 16.33, 34.49, 34.74, 34.35, 24.31, 29.49, 41.0, 21.25, 24.19, 28.29, 20.27, 35.75, 19.59, 33.66, 22.26, 19.21, 22.23, 27.82, 31.77, 25.51, 85.61, 21.79, 25.39, 31.0, 24.17, 25.36, 25.29, 30.44, 30.2, 20.48, 21.25, 20.31, 23.99, 27.18, 65.93, 28.89, 21.35, 30.75, 23.09, 28.57, 26.0, 17.87, 30.46, 43.75, 29.85, 27.63, 26.6, 41.77, 20.75, 32.71, 32.93, 19.32, 42.3, 22.79, 31.02, 42.51, 30.14, 21.65, 25.31, 35.02, 16.99, 19.88, 23.57, 28.25, 54.09, 31.44, 27.96, 25.8, 22.02]
params_opt_on_acrobat =  [75.43, 75.48, 82.23, 123.4, 490.8, 217.52, 79.03, 112.37, 88.39, 75.08, 227.97, 258.36, 427.63, 86.87, 175.61, 134.2, 359.26, 289.89, 131.71, 103.41, 232.87, 163.64, 66.23, 75.55, 253.47, 90.35, 73.6, 326.71, 77.24, 110.86, 75.49, 401.95, 452.95, 76.45, 65.03, 408.21, 92.03, 243.86, 303.84, 66.04, 434.89, 338.68, 49.2, 67.58, 401.14, 100.97, 136.82, 65.26, 75.06, 260.84, 89.89, 98.31, 171.34, 79.14, 82.4, 77.41, 282.56, 67.57, 101.9, 204.75, 116.69, 62.18, 99.29, 81.6, 79.68, 86.29, 74.98, 117.22, 260.43, 251.26, 74.99, 54.29, 70.47, 89.6, 67.84, 116.73, 331.87, 68.43, 82.69, 295.48, 268.99, 70.77, 87.2, 66.35, 77.72, 115.01, 127.33, 64.36, 352.67, 59.46, 60.08, 88.45, 80.52, 96.2, 85.82, 352.42, 68.77, 69.98, 82.51, 96.64]
data = [params_opt_on_cartpole, params_opt_on_mountaincar, params_opt_on_acrobat]

#get aves
ave_cc,ave_mc,ave_ac = round(statistics.mean(params_opt_on_cartpole)), round(statistics.mean(params_opt_on_mountaincar)), round(statistics.mean(params_opt_on_acrobat))

#get medians
med1, med2, med3 = round(statistics.median(params_opt_on_cartpole)), round(statistics.median(params_opt_on_mountaincar)), round(statistics.median(params_opt_on_acrobat))

fig1, ax1 = plt.subplots()
ax1.set_title('Testing Q-learing on CartPole')
ax1.boxplot(data)
plt.xticks([1, 2, 3], ['Tuned on CartPole', 'Tuned on MountainCar', 'Tuned on Acrobot'])
plt.ylabel('Score')

plt.text(1.2, med1, med1)
plt.text(2.2, med2, med2)
plt.text(3.2, med3, med3)

# show plot
plt.show()

# zoomed in

fig1, ax1 = plt.subplots()
ax1.set_title('Testing Q-learing on CartPole, zoomed in')
ax1.boxplot(data)
plt.xticks([1, 2, 3], ['Tuned on CartPole', 'Tuned on MountainCar', 'Tuned on Acrobot'])
plt.ylabel('Score')

plt.text(1.2, med1, med1)
plt.text(2.2, med2, med2)
plt.text(3.2, med3, med3)

plt.ylim(0,1200)
# show plot
plt.show()


# Tested on MountainCar
params_opt_on_cartpole =  [-185.31, -229.08, -205.79, -223.26, -243.78, -290.22, -226.18, -226.87, -219.24, -186.83, -219.22, -242.51, -188.81, -307.41, -500.0, -181.6, -478.54, -258.63, -252.37, -500.0, -500.0, -209.28, -196.5, -255.15, -239.08, -457.42, -315.5, -242.28, -237.6, -183.03, -290.45, -191.62, -295.91, -201.51, -251.54, -334.78, -201.83, -272.85, -203.28, -223.74, -153.67, -257.79, -500.0, -270.68, -240.27, -268.59, -154.14, -215.57, -226.59, -351.85, -224.4, -185.02, -191.77, -250.29, -188.17, -322.61, -207.33, -174.55, -204.74, -239.51, -307.4, -226.65, -197.79, -251.62, -240.97, -175.86, -185.31, -208.52, -181.09, -176.64, -247.25, -178.1, -260.58, -246.89, -322.43, -196.36, -169.21, -219.3, -187.63, -231.75, -242.71, -175.82, -211.11, -316.43, -326.75, -236.25, -226.37, -222.68, -197.32, -215.45, -194.62, -284.43, -223.56, -216.38, -255.02, -496.97, -182.66, -191.88, -159.06, -225.02]
params_opt_on_mountaincar =  [-171.97, -249.17, -172.11, -162.66, -162.31, -158.22, -151.85, -193.15, -169.68, -158.57, -177.85, -141.19, -144.4, -185.25, -166.76, -194.2, -193.18, -207.76, -151.33, -135.8, -158.55, -145.69, -166.65, -153.17, -173.26, -205.27, -143.36, -184.9, -173.21, -199.76, -169.43, -137.15, -161.54, -173.46, -160.38, -214.97, -150.19, -156.21, -166.51, -156.3, -160.01, -169.82, -169.45, -182.38, -161.15, -180.54, -170.03, -135.68, -169.62, -167.16, -185.52, -183.86, -185.47, -238.83, -157.62, -160.28, -173.11, -162.34, -150.52, -184.7, -172.94, -196.89, -156.01, -173.6, -164.25, -213.61, -157.85, -148.31, -191.43, -195.89, -168.0, -171.38, -161.11, -207.55, -128.96, -175.36, -139.35, -166.23, -172.68, -173.02, -141.13, -167.21, -165.47, -143.93, -171.68, -185.49, -167.75, -149.46, -171.56, -151.73, -209.39, -141.97, -163.66, -163.87, -183.81, -186.79, -170.16, -192.49, -192.84, -167.82]
params_opt_on_acrobat =  [-148.22, -144.52, -144.97, -144.53, -143.1, -130.32, -140.59, -141.29, -150.51, -143.75, -144.6, -134.13, -135.41, -152.23, -136.05, -125.61, -141.14, -139.48, -146.71, -139.72, -148.23, -134.46, -142.05, -129.32, -155.76, -143.77, -132.99, -145.15, -161.28, -144.77, -154.42, -148.67, -144.73, -151.94, -152.98, -134.25, -141.58, -139.87, -148.21, -136.71, -146.13, -143.0, -149.94, -136.84, -131.75, -135.16, -139.65, -122.89, -156.84, -138.53, -139.02, -140.64, -134.41, -143.92, -148.02, -128.66, -146.09, -153.75, -168.65, -134.28, -142.14, -203.4, -140.49, -149.75, -151.73, -153.64, -140.88, -173.05, -150.71, -148.51, -154.65, -147.83, -158.28, -175.6, -146.04, -148.31, -144.96, -145.07, -142.75, -150.04, -136.0, -144.1, -151.86, -153.83, -143.72, -149.9, -144.72, -146.07, -148.34, -154.7, -145.44, -140.65, -151.26, -137.52, -152.87, -148.44, -142.56, -143.79, -156.14, -142.99]
data = [params_opt_on_cartpole, params_opt_on_mountaincar, params_opt_on_acrobat]

#get aves
ave_cm,ave_mm,ave_am = round(statistics.mean(params_opt_on_cartpole)), round(statistics.mean(params_opt_on_mountaincar)), round(statistics.mean(params_opt_on_acrobat))

#get medians
med1, med2, med3 = round(statistics.median(params_opt_on_cartpole)), round(statistics.median(params_opt_on_mountaincar)), round(statistics.median(params_opt_on_acrobat))

fig1, ax1 = plt.subplots()
ax1.set_title('Testing Q-learing on MountainCar')
ax1.boxplot(data)
plt.xticks([1, 2, 3], ['Tuned on CartPole', 'Tuned on MountainCar', 'Tuned on Acrobot'])
plt.ylabel('Score')

plt.text(1.2, med1, med1)
plt.text(2.2, med2, med2)
plt.text(3.2, med3, med3)

# show plot
plt.show()

# Tested on acrobot
params_opt_on_cartpole =  [-462.68, -217.54, -243.19, -157.64, -500.0, -208.64, -177.88, -152.69, -238.82, -500.0, -500.0, -226.81, -168.45, -173.79, -159.02, -500.0, -165.35, -153.73, -265.56, -150.63, -160.73, -206.83, -148.85, -196.44, -195.34, -150.74, -348.33, -447.1, -500.0, -181.27, -178.05, -500.0, -227.84, -500.0, -296.38, -193.35, -160.79, -179.53, -163.91, -210.03, -500.0, -181.64, -500.0, -180.78, -500.0, -199.13, -212.13, -147.17, -183.43, -382.92, -200.6, -500.0, -219.0, -171.28, -232.06, -189.71, -500.0, -500.0, -134.01, -229.23, -500.0, -147.16, -292.65, -186.82, -500.0, -173.74, -221.79, -500.0, -214.88, -168.2, -184.54, -229.24, -251.17, -165.0, -251.81, -149.01, -191.95, -193.29, -500.0, -179.34, -500.0, -148.84, -261.91, -255.37, -159.03, -239.84, -148.23, -172.75, -185.63, -304.88, -500.0, -297.05, -186.7, -500.0, -183.9, -152.01, -198.93, -141.24, -500.0, -208.89]
params_opt_on_mountaincar =  [-145.79, -125.11, -150.8, -139.58, -170.59, -122.89, -167.56, -127.48, -500.0, -125.77, -129.76, -118.36, -125.97, -138.18, -500.0, -500.0, -128.48, -135.72, -120.45, -120.39, -500.0, -122.5, -500.0, -109.57, -125.4, -128.37, -163.35, -109.84, -500.0, -127.56, -133.3, -138.37, -127.53, -131.49, -138.05, -128.24, -500.0, -122.34, -129.53, -162.5, -129.39, -125.49, -144.82, -500.0, -154.04, -138.35, -144.45, -128.52, -122.24, -500.0, -142.66, -110.19, -151.06, -500.0, -110.98, -162.76, -500.0, -133.88, -183.06, -500.0, -136.53, -130.81, -127.05, -134.59, -130.36, -128.79, -500.0, -140.77, -500.0, -500.0, -119.28, -141.54, -119.74, -112.18, -135.73, -500.0, -120.72, -500.0, -125.48, -128.75, -121.02, -159.22, -138.68, -123.64, -133.02, -142.17, -500.0, -115.32, -147.41, -143.92, -121.17, -120.6, -127.58, -500.0, -121.24, -132.98, -114.87, -117.3, -135.4, -142.72]
params_opt_on_acrobat =  [-102.62, -102.15, -105.27, -106.04, -109.9, -95.65, -110.34, -107.76, -103.47, -102.67, -95.95, -122.08, -500.0, -107.49, -103.96, -112.14, -96.35, -106.86, -95.11, -97.8, -102.61, -91.63, -116.06, -107.69, -109.85, -500.0, -100.09, -111.77, -126.48, -106.04, -103.24, -98.32, -110.49, -106.45, -114.68, -108.19, -103.39, -108.36, -105.65, -105.0, -123.78, -102.65, -106.73, -101.98, -111.62, -104.28, -102.81, -122.63, -112.02, -108.9, -105.76, -102.46, -105.15, -107.08, -101.03, -103.92, -500.0, -110.53, -118.35, -114.12, -104.85, -118.5, -99.05, -108.01, -500.0, -104.8, -109.63, -102.78, -95.64, -108.19, -104.79, -142.1, -104.02, -96.19, -108.15, -112.39, -104.45, -94.59, -99.45, -113.29, -97.03, -122.27, -107.52, -92.77, -103.51, -108.3, -97.74, -100.9, -101.43, -100.98, -114.62, -105.84, -99.63, -109.72, -108.29, -99.8, -117.88, -112.38, -93.96, -108.1]
data = [params_opt_on_cartpole, params_opt_on_mountaincar, params_opt_on_acrobat]

#get aves
ave_ca,ave_ma,ave_aa = round(statistics.mean(params_opt_on_cartpole)), round(statistics.mean(params_opt_on_mountaincar)), round(statistics.mean(params_opt_on_acrobat))

#get medians
med1, med2, med3 = round(statistics.median(params_opt_on_cartpole)), round(statistics.median(params_opt_on_mountaincar)), round(statistics.median(params_opt_on_acrobat))

fig1, ax1 = plt.subplots()
ax1.set_title('Testing Q-learing on Acrobot')
ax1.boxplot(data)
plt.xticks([1, 2, 3], ['Tuned on CartPole', 'Tuned on MountainCar', 'Tuned on Acrobot'])
plt.ylabel('Score')

plt.text(1.2, med1, med1)
plt.text(2.2, med2, med2)
plt.text(3.2, med3, med3)

# show plot
plt.show()



# Tabel of averages
data = [["Cartpole", ave_cc, ave_cm, ave_ca], 
        ["MountainCar", ave_mc, ave_mm, ave_ma], 
        ["Acrobot", ave_ac, ave_am, ave_aa]]
  
#define header names
col_names = ["Tuned on", "Average in Cartpole", "Average in MountainCar", "Average in Acrobot"]
  
#display table
print(tabulate(data, headers=col_names))